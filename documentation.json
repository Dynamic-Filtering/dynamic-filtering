{
    "pipes": [
        {
            "name": "InstanceofPipe",
            "id": "pipe-InstanceofPipe-6dec1e1d42839a4983c474db772f3726ad156522e8e9cf54f461eaacd4a33c3f7d6fce4712fe8aa904867550a8b973c0aee63d53f3328a755024e6c2bc56b27f",
            "file": "src/app/pipes/instance-of.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "className",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "instanceof",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'instanceof', standalone: true })\r\nexport class InstanceofPipe implements PipeTransform {\r\n    transform(value: any, className: any): boolean {\r\n        return value instanceof className;\r\n    }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "DynamicQueryOption",
            "id": "interface-DynamicQueryOption-924d67688b68761b832c889edd3d36023fd26b340c832d8aaf555ca8b00e14a7372835700c334895645decb165554adc5210d3d1d37886d7408bbc6ca9b52b40",
            "file": "src/models/dynamic-query-option.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Filter } from './filtering/filter.model';\r\nimport { Pagination } from './pagination/pagination.model';\r\nimport { Sorting } from './sorting/sorting.model';\r\n\r\nexport interface DynamicQueryOption {\r\n    filters: Filter<unknown>[];\r\n    sortings: Sorting[];\r\n    pagination: Pagination;\r\n}\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter<>[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sortings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorting[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AbstractFilterComponent",
            "id": "class-AbstractFilterComponent-e66d2969907492e09f00550d0c9e885b88c3b665367b6961929b51324a7b537dc5285fa293d0501a63d9497b8c26a21ba22718fe747bc0ea6d32df5ef0ca0402",
            "file": "src/app/components/filters/abstract-filter.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class AbstractFilterComponent {\r\n    // protected abstract handleOptionSelected: () => void;\r\n    // protected abstract handleReset: () => void;\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Condition",
            "id": "class-Condition-f5dc0b44935ed1f4c5ee927bd90301dcd05838958defc0f18f220ed396f503d5ab8b579da112b23ad7b2823ba4366413dff5ca3fcdc4807def9602761616dce3",
            "file": "src/models/condition.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { OtherOperation } from './filtering/other-operation.model';\r\nimport { RangeOperation } from './filtering/range-operation.model';\r\n\r\nexport class Condition<T> {\r\n    id: number;\r\n    column: string;\r\n    operation: RangeOperation | OtherOperation;\r\n    value?: T;\r\n\r\n    constructor(\r\n        id: number,\r\n        column: string,\r\n        operation: RangeOperation | OtherOperation,\r\n        value?: T\r\n    ) {\r\n        this.id = id;\r\n        this.column = column;\r\n        this.operation = operation;\r\n        this.value = value;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operation",
                        "type": "RangeOperation | OtherOperation",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operation",
                        "type": "RangeOperation | OtherOperation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "operation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RangeOperation | OtherOperation",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Filter",
            "id": "class-Filter-013540defb236a366e85b38e1cf71988fd2c63d3545f85afe90a12b4b6bd448e48ce3f49ae521aa3b811e8a1d30846e9ff6a707c3ac86c5424e7fd6d9ad57ab3",
            "file": "src/models/filtering/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Condition } from '../condition.model';\r\n\r\nexport abstract class Filter<T> {\r\n    protected conditions: Condition<T>[] = [];\r\n    public label: string;\r\n\r\n    constructor(displayValue: string, conditions: Condition<T>[]) {\r\n        this.label = displayValue;\r\n        this.conditions = conditions;\r\n    }\r\n\r\n    get Conditions() {\r\n        return this.conditions;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "conditions",
                        "type": "Condition<T>[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "conditions",
                        "type": "Condition<T>[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "conditions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Condition<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "Conditions": {
                    "name": "Conditions",
                    "getSignature": {
                        "name": "Conditions",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MultiSelectFilter",
            "id": "class-MultiSelectFilter-2e84d235b6ae8fb5bf8c30b02a708c5ebab94ecfcb3d43c2611be745c8fdb3985c7c0c5c10a924d7d40f114f9342d2c1d7c9c9a3568071b253b354dceb19051d",
            "file": "src/models/filtering/multi-select-filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Filter } from './filter.model';\r\nimport { Condition } from '../condition.model';\r\nimport { MultiSelectOption } from './multi-select-option.model';\r\nimport { OtherOperation } from './other-operation.model';\r\n\r\nexport class MultiSelectFilter<T> extends Filter<T> {\r\n    private options: MultiSelectOption<T>[] = [];\r\n    private column: string;\r\n\r\n    constructor(\r\n        displayValue: string,\r\n        column: string,\r\n        options: MultiSelectOption<T>[]\r\n    ) {\r\n        super(displayValue, []);\r\n        this.column = column;\r\n        this.options = options;\r\n    }\r\n\r\n    // We assign the same id as the option in order to easily match option with condition since you could add the same option twice under different id's\r\n    public toggleValue(id: number) {\r\n        const option = this.options.find(\r\n            (option: MultiSelectOption<T>) => option.id === id\r\n        );\r\n        if (option) {\r\n            if (option.checked) {\r\n                const conditionIndex = this.conditions.findIndex(\r\n                    (condition: Condition<T>) => condition.id === option.id\r\n                );\r\n                if (conditionIndex !== -1) {\r\n                    this.conditions.splice(conditionIndex, 1);\r\n                }\r\n            } else {\r\n                const selectCondition: Condition<T> = new Condition<T>(\r\n                    option.id,\r\n                    this.column,\r\n                    OtherOperation.Equal\r\n                );\r\n                this.conditions.push(selectCondition);\r\n                option.checked = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public resetOptions() {\r\n        this.options = this.options.map((option: MultiSelectOption<T>) => {\r\n            option.checked = false;\r\n            return option;\r\n        });\r\n        this.conditions.length = 0;\r\n    }\r\n\r\n    // May want to split up resetting the conditions from the selected options at some point\r\n    // Same applies for the toggle method\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "MultiSelectOption<T>[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "MultiSelectOption<T>[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MultiSelectOption<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "conditions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Condition<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "Filter"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Filter"
                    }
                }
            ],
            "methods": [
                {
                    "name": "resetOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggleValue",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Filter"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MultiSelectOption",
            "id": "class-MultiSelectOption-3df1ec5235e41d13ad66ca211f104926166b17a50910818be321f170d99698fd2fdcbcfe9ee35f68893cd65cd5edaa5cf220b31825f52691655ed26003fdb85c",
            "file": "src/models/filtering/multi-select-option.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SelectOption } from './select-option.model';\r\n\r\nexport class MultiSelectOption<T> extends SelectOption<T> {\r\n    checked: boolean = false;\r\n\r\n    constructor(id: number, label: string, value: T, checked?: boolean) {\r\n        super(id, label, value);\r\n\r\n        if (checked !== undefined) {\r\n            this.checked = checked;\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "checked",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checked",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "SelectOption"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "SelectOption"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "SelectOption"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "SelectOption"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pagination",
            "id": "class-Pagination-d86fdd888e94e4d5d7b2fa8c3db7654cf58c292684947717affe456386485f96fe8b3a2517edf3cad44cab20da9d65cc139ca0ea0ffc38351c27fee72e587b89",
            "file": "src/models/pagination/pagination.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Pagination {\r\n    skip: number = 0;\r\n    take: number = 25;\r\n\r\n    constructor(skip: number, take: number) {\r\n        this.skip = skip;\r\n        this.take = take;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "skip",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "take",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "skip",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "take",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "skip",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "take",
                    "defaultValue": "25",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RangeFilter",
            "id": "class-RangeFilter-28e675e89ef169c5366c8302d4c387d717dadd5d29c265cd2565aeab2c0742ca4a1b5ff816c1698bdff6a2904383e69aaa60544805baac59a0835ef6b932d528",
            "file": "src/models/filtering/range-filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Filter } from './filter.model';\r\nimport { Condition } from '../condition.model';\r\nimport { RangeOperation } from './range-operation.model';\r\n\r\nexport class RangeFilter<T extends number | Date> extends Filter<T> {\r\n    private readonly column;\r\n\r\n    constructor(displayValue: string, column: string) {\r\n        super(displayValue, []);\r\n        this.column = column;\r\n    }\r\n\r\n    public setRange(\r\n        value1: T,\r\n        operation1: RangeOperation,\r\n        value2: T,\r\n        operation2: RangeOperation\r\n    ) {\r\n        const condition1 = new Condition<T>(1, this.column, operation1, value1);\r\n        const condition2 = new Condition<T>(2, this.column, operation2, value2);\r\n\r\n        this.conditions = [condition1, condition2];\r\n    }\r\n\r\n    public reset() {\r\n        this.conditions.length = 0;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "conditions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Condition<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "Filter"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Filter"
                    }
                }
            ],
            "methods": [
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setRange",
                    "args": [
                        {
                            "name": "value1",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operation1",
                            "type": "RangeOperation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value2",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operation2",
                            "type": "RangeOperation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value1",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operation1",
                            "type": "RangeOperation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value2",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operation2",
                            "type": "RangeOperation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Filter"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectFilter",
            "id": "class-SelectFilter-b5293d5a1d5fe3b6ab2dcfe89edcab42eedf1246eb0f90c8114b98b865542bd88adb7000ee90b3531d94003e06bd84d23d7e9ba50852752d831fa314234dcf13",
            "file": "src/models/filtering/select-filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Filter } from './filter.model';\r\nimport { Condition } from '../condition.model';\r\nimport { SelectOption } from './select-option.model';\r\nimport { OtherOperation } from './other-operation.model';\r\n\r\nexport class SelectFilter<T> extends Filter<T> {\r\n    private options: SelectOption<T>[] = [];\r\n\r\n    constructor(\r\n        displayValue: string,\r\n        column: string,\r\n        options: SelectOption<T>[]\r\n    ) {\r\n        const selectCondition: Condition<T> = new Condition<T>(\r\n            1,\r\n            column,\r\n            OtherOperation.Equal\r\n        );\r\n        const conditions = [selectCondition];\r\n\r\n        super(displayValue, conditions);\r\n        this.options = options;\r\n    }\r\n\r\n    get Options() {\r\n        return this.options;\r\n    }\r\n\r\n    public selectValue(id: number) {\r\n        const option = this.options.find(\r\n            (option: SelectOption<T>) => option.id === id\r\n        );\r\n        if (option) {\r\n            this.conditions[0].value = option.value;\r\n        }\r\n    }\r\n\r\n    public resetValue() {\r\n        this.conditions[0].value = undefined;\r\n    }\r\n\r\n    // Might need options for replacing the list with a new one or adding and remove items\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "SelectOption<T>[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "displayValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "SelectOption<T>[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "conditions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Condition<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "Filter"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Filter"
                    }
                }
            ],
            "methods": [
                {
                    "name": "resetValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectValue",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Filter"
            ],
            "accessors": {
                "Options": {
                    "name": "Options",
                    "getSignature": {
                        "name": "Options",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectOption",
            "id": "class-SelectOption-15710006280e64982f13d4273dc1f6ec7ba7049c5dda295e18254ec7763ade8fa549e4c949705418d09cfbcc11bb93ea1e7e35f58e12678ff8a68e4697aa815e",
            "file": "src/models/filtering/select-option.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SelectOption<T> {\r\n    id: number;\r\n    label: string;\r\n    value: T;\r\n\r\n    constructor(id: number, label: string, value: T) {\r\n        this.id = id;\r\n        this.label = label;\r\n        this.value = value;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Sorting",
            "id": "class-Sorting-94969b921e1d7627d759abff645426e46d9ef36988f2a569aa9aa7ea19946fd0b7a9db355dde4b33a9dfd56d6785242ec0ccb262cec44ad4f33f5237a8a71133",
            "file": "src/models/sorting/sorting.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SortingDirection } from './sorting-direction.model';\r\n\r\nexport class Sorting {\r\n    column: string;\r\n    sortingDirection: SortingDirection;\r\n\r\n    constructor(column: string, sortingDirection: SortingDirection) {\r\n        this.column = column;\r\n        this.sortingDirection = sortingDirection;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sortingDirection",
                        "type": "SortingDirection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "column",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sortingDirection",
                        "type": "SortingDirection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sortingDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortingDirection",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f9fc6aaebec78501f0f2746ce37bccdff17a1f90d6abedc75aee10e4762304ec6fe65698495a2f65bb495fe5b6f7efe6adfa7e21e10adcf4a7c0633a5ee4809c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filters",
                    "defaultValue": "[\r\n        new SelectFilter('SelectFilter', 'column1', [\r\n            {\r\n                id: 1,\r\n                value: 1,\r\n                label: 'NL',\r\n            },\r\n            {\r\n                id: 2,\r\n                value: 2,\r\n                label: 'BE',\r\n            },\r\n            {\r\n                id: 3,\r\n                value: 3,\r\n                label: 'DE',\r\n            },\r\n            {\r\n                id: 4,\r\n                value: 4,\r\n                label: 'CZ',\r\n            },\r\n            {\r\n                id: 5,\r\n                value: 5,\r\n                label: 'PO',\r\n            },\r\n            {\r\n                id: 6,\r\n                value: 6,\r\n                label: 'US',\r\n            },\r\n            {\r\n                id: 7,\r\n                value: 7,\r\n                label: 'GB',\r\n            },\r\n        ]),\r\n        new RangeFilter('RangeFilter', 'column2'),\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[\r\n        {\r\n            id: 1,\r\n            value: 1,\r\n            label: 'Label1',\r\n        },\r\n        {\r\n            id: 2,\r\n            value: 2,\r\n            label: 'Label2',\r\n        },\r\n        {\r\n            id: 3,\r\n            value: 3,\r\n            label: 'Label3',\r\n        },\r\n        {\r\n            id: 4,\r\n            value: 4,\r\n            label: 'Label4',\r\n        },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption<number>[]",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "optionSelectedHandler",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "FilterComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectFilterComponent",
                    "type": "component"
                },
                {
                    "name": "DropdownComponent",
                    "type": "component"
                },
                {
                    "name": "SelectMenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { FilterComponent } from './components/filters/filter.component';\r\nimport { Filter } from '../models/filtering/filter.model';\r\nimport { SelectFilter } from '../models/filtering/select-filter.model';\r\nimport { RangeFilter } from '../models/filtering/range-filter.model';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from './components/button/button.component';\r\nimport { SelectFilterComponent } from './components/filters/select-filter/select-filter.component';\r\nimport { DropdownComponent } from './components/dropdown/dropdown.component';\r\nimport { SelectMenuComponent } from './components/select-menu/select-menu.component';\r\nimport { SelectOption } from '../models/filtering/select-option.model';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    standalone: true,\r\n    imports: [\r\n        RouterOutlet,\r\n        FilterComponent,\r\n        CommonModule,\r\n        ButtonComponent,\r\n        SelectFilterComponent,\r\n        DropdownComponent,\r\n        SelectMenuComponent,\r\n    ],\r\n    templateUrl: './app.component.html',\r\n    styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n    protected filters: Filter<any>[] = [\r\n        new SelectFilter('SelectFilter', 'column1', [\r\n            {\r\n                id: 1,\r\n                value: 1,\r\n                label: 'NL',\r\n            },\r\n            {\r\n                id: 2,\r\n                value: 2,\r\n                label: 'BE',\r\n            },\r\n            {\r\n                id: 3,\r\n                value: 3,\r\n                label: 'DE',\r\n            },\r\n            {\r\n                id: 4,\r\n                value: 4,\r\n                label: 'CZ',\r\n            },\r\n            {\r\n                id: 5,\r\n                value: 5,\r\n                label: 'PO',\r\n            },\r\n            {\r\n                id: 6,\r\n                value: 6,\r\n                label: 'US',\r\n            },\r\n            {\r\n                id: 7,\r\n                value: 7,\r\n                label: 'GB',\r\n            },\r\n        ]),\r\n        new RangeFilter('RangeFilter', 'column2'),\r\n    ];\r\n\r\n    public options: SelectOption<number>[] = [\r\n        {\r\n            id: 1,\r\n            value: 1,\r\n            label: 'Label1',\r\n        },\r\n        {\r\n            id: 2,\r\n            value: 2,\r\n            label: 'Label2',\r\n        },\r\n        {\r\n            id: 3,\r\n            value: 3,\r\n            label: 'Label3',\r\n        },\r\n        {\r\n            id: 4,\r\n            value: 4,\r\n            label: 'Label4',\r\n        },\r\n    ];\r\n\r\n    public optionSelectedHandler(option: SelectOption<unknown>): void {\r\n        console.log('Reached final stop');\r\n        console.log('Selected option', option);\r\n    }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for(filter of filters; track filter){\r\n<app-filter\r\n    [filter]=\"filter\"\r\n    (optionSelected)=\"optionSelectedHandler($event)\"\r\n></app-filter>\r\n}\r\n\r\n<app-select-menu\r\n    label=\"Label\"\r\n    placeholder=\"Placeholder\"\r\n    [options]=\"options\"\r\n></app-select-menu>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-458692975f2b7a5a7fcf865d2a323f964f56193719c91d84325dd91f8f897344bc9b386e202e828d4f13a4123d2f9980d216ec6edb96def934d85f37115465a2-1",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "defaultValue": "input('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "input('cta')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input, InputSignal } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-button',\r\n    standalone: true,\r\n    imports: [],\r\n    templateUrl: './button.component.html',\r\n    styleUrl: './button.component.scss',\r\n})\r\nexport class ButtonComponent {\r\n    public label: InputSignal<string> = input.required();\r\n    public type: InputSignal<string> = input('cta'); // cta, primary, secondary\r\n    public size: InputSignal<string> = input('medium'); //Small, medium, large\r\n    // Disabled\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button [innerText]=\"label()\" type=\"button\" [class]=\"type()\"></button>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-04d69ab40666752ee359ad62983e8555f91a103d231154522a9b967f93d184ffa02d112a50c25ead9881c4deeb7d75d64505acf9df9803c7b6ec66ffd6dc2791",
            "file": "src/app/components/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-dropdown',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    templateUrl: './dropdown.component.html',\r\n    styleUrl: './dropdown.component.scss',\r\n})\r\nexport class DropdownComponent {}\r\n",
            "styleUrl": "./dropdown.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- <div class=\"search\">\r\n    <input\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        id=\"searchbar\"\r\n        (input)=\"changeInput($event)\"\r\n    />\r\n    <button [innerText]=\"'Clear'\" type=\"button\"></button>\r\n</div>\r\n<div class=\"options-section\">\r\n    @for(option of options; track option.id){\r\n    <div\r\n        class=\"option\"\r\n        [innerText]=\"option.displayValue\"\r\n        (click)=\"optionSelectedHandler()\"\r\n    ></div>\r\n    }\r\n</div> -->\r\n<!-- <select [value]=\"null\">\r\n    <option>Kaas</option>\r\n    <option>Ham</option>\r\n</select> -->\r\n<div class=\"dropdown\">\r\n    <button class=\"dropdown-button\">\r\n        <!-- {{ selectedOption ? selectedOption.label : 'Select an option' }} -->\r\n    </button>\r\n    <div class=\"dropdown-content\">\r\n        <input type=\"text\" class=\"search-input\" placeholder=\"Search...\" />\r\n        <!-- <div\r\n        *ngFor=\"let option of filteredOptions\"\r\n        class=\"dropdown-option\"\r\n        (click)=\"selectOption(option)\"\r\n      >\r\n        {{ option.label }}\r\n      </div> -->\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "FilterComponent",
            "id": "component-FilterComponent-2a21072e812bdb5e6efb17bbd587b2f384333f93291dcd18c53e4b02ac146829a92fd5e873f884e7bae2d64f2a682f7fb7747ef9b4e19eccacd247ad090b5680",
            "file": "src/app/components/filters/filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "optionSelected",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<SelectOption<>>"
                },
                {
                    "name": "reset",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentMap",
                    "defaultValue": "new Map<any, any>([\r\n        [SelectFilter, SelectFilterComponent],\r\n        [RangeFilter, RangeFilterComponent],\r\n    ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filter",
                    "defaultValue": "input.required<Filter<unknown>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Filter<>>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "filterContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'filterContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "optionSelectedHandler",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SelectFilterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n    AfterViewInit,\r\n    Component,\r\n    ComponentFactoryResolver,\r\n    computed,\r\n    effect,\r\n    EventEmitter,\r\n    Injector,\r\n    input,\r\n    InputSignal,\r\n    Output,\r\n    Renderer2,\r\n    Signal,\r\n    ViewChild,\r\n    ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Filter } from '../../../models/filtering/filter.model';\r\nimport { InstanceofPipe } from '../../pipes/instance-of.pipe';\r\nimport { SelectFilterComponent } from './select-filter/select-filter.component';\r\nimport { SelectFilter } from '../../../models/filtering/select-filter.model';\r\nimport { RangeFilter } from '../../../models/filtering/range-filter.model';\r\nimport { RangeFilterComponent } from './range-filter/range-filter.component';\r\nimport { SelectOption } from '../../../models/filtering/select-option.model';\r\n\r\n@Component({\r\n    selector: 'app-filter',\r\n    standalone: true,\r\n    imports: [CommonModule, SelectFilterComponent],\r\n    templateUrl: './filter.component.html',\r\n})\r\nexport class FilterComponent implements AfterViewInit {\r\n    public filter: InputSignal<Filter<unknown>> =\r\n        input.required<Filter<unknown>>();\r\n    @Output() optionSelected: EventEmitter<SelectOption<unknown>> =\r\n        new EventEmitter<any>();\r\n    @Output() reset: EventEmitter<any> = new EventEmitter<any>();\r\n    @ViewChild('filterContainer', { read: ViewContainerRef })\r\n    filterContainer!: ViewContainerRef;\r\n\r\n    private componentMap = new Map<any, any>([\r\n        [SelectFilter, SelectFilterComponent],\r\n        [RangeFilter, RangeFilterComponent],\r\n    ]);\r\n\r\n    public ngAfterViewInit() {\r\n        this.loadComponent();\r\n    }\r\n\r\n    private loadComponent() {\r\n        const componentType = this.componentMap.get(this.filter().constructor);\r\n\r\n        if (componentType) {\r\n            const componentRef =\r\n                this.filterContainer.createComponent(componentType);\r\n            (componentRef.instance as any).filter = this.filter;\r\n\r\n            if (componentRef.instance instanceof SelectFilterComponent) {\r\n                componentRef.instance.optionSelected.subscribe(\r\n                    (option: SelectOption<unknown>) => {\r\n                        this.optionSelectedHandler(option);\r\n                    }\r\n                );\r\n            } else if (componentRef.instance instanceof RangeFilterComponent) {\r\n                // Register component specific events\r\n            }\r\n        }\r\n    }\r\n\r\n    protected optionSelectedHandler(option: SelectOption<unknown>): void {\r\n        console.log('Event caucht from child and re-emitted');\r\n        this.optionSelected.emit(option);\r\n    }\r\n\r\n    protected resetHandler(): void {\r\n        console.log('Event caucht from child and re-emitted');\r\n        this.optionSelected.emit();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<ng-container #filterContainer></ng-container>\r\n"
        },
        {
            "name": "RangeFilterComponent",
            "id": "component-RangeFilterComponent-6735845a04f64eea3ebfee580fc9c9d8d6bed05c50cdeb3796525976e27711f7364d99401cf28651fb3a47b1962c714c2792693299fa802c2f71d0ae476dd029",
            "file": "src/app/components/filters/range-filter/range-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-range-filter",
            "styleUrls": [
                "./range-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./range-filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "input.required<RangeFilter<number | Date>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<RangeFilter<number | Date>>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[\r\n        {\r\n            id: 1,\r\n            label: '>',\r\n            value: RangeOperation.GreaterThan,\r\n        },\r\n        {\r\n            id: 2,\r\n            label: '>=',\r\n            value: RangeOperation.GreaterThanOrEqual,\r\n        },\r\n        {\r\n            id: 3,\r\n            label: '<',\r\n            value: RangeOperation.LowerThan,\r\n        },\r\n        {\r\n            id: 4,\r\n            label: '<=',\r\n            value: RangeOperation.LowerThanOrEqual,\r\n        },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption<RangeOperation>[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showingContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "clickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectMenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n    Component,\r\n    ElementRef,\r\n    HostListener,\r\n    input,\r\n    InputSignal,\r\n} from '@angular/core';\r\nimport { ButtonComponent } from '../../button/button.component';\r\nimport { AbstractFilterComponent } from '../abstract-filter.component';\r\nimport { SelectMenuComponent } from '../../select-menu/select-menu.component';\r\nimport { RangeOperation } from '../../../../models/filtering/range-operation.model';\r\nimport { SelectOption } from '../../../../models/filtering/select-option.model';\r\nimport { RangeFilter } from '../../../../models/filtering/range-filter.model';\r\nimport { Condition } from '../../../../models/condition.model';\r\n\r\n@Component({\r\n    selector: 'app-range-filter',\r\n    standalone: true,\r\n    imports: [CommonModule, ButtonComponent, SelectMenuComponent],\r\n    templateUrl: './range-filter.component.html',\r\n    styleUrls: ['./range-filter.component.scss'],\r\n})\r\nexport class RangeFilterComponent extends AbstractFilterComponent {\r\n    public filter: InputSignal<RangeFilter<number | Date>> =\r\n        input.required<RangeFilter<number | Date>>();\r\n\r\n    public showingContent: boolean = false;\r\n    public filterOptions: SelectOption<RangeOperation>[] = [\r\n        {\r\n            id: 1,\r\n            label: '>',\r\n            value: RangeOperation.GreaterThan,\r\n        },\r\n        {\r\n            id: 2,\r\n            label: '>=',\r\n            value: RangeOperation.GreaterThanOrEqual,\r\n        },\r\n        {\r\n            id: 3,\r\n            label: '<',\r\n            value: RangeOperation.LowerThan,\r\n        },\r\n        {\r\n            id: 4,\r\n            label: '<=',\r\n            value: RangeOperation.LowerThanOrEqual,\r\n        },\r\n    ];\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    clickOutside(event: MouseEvent) {\r\n        if (!this.elementRef.nativeElement.contains(event.target)) {\r\n            this.showingContent = false;\r\n        }\r\n    }\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n        super();\r\n    }\r\n\r\n    protected toggleContent(): void {\r\n        this.showingContent = !this.showingContent;\r\n    }\r\n\r\n    protected applyHandler(): void {\r\n        // Emit event??\r\n        this.filter().setRange(\r\n            1,\r\n            RangeOperation.GreaterThan,\r\n            2,\r\n            RangeOperation.LowerThan,\r\n        );\r\n        this.toggleContent();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: inline-block;\r\n    position: relative;\r\n\r\n    .filter-content {\r\n        margin-top: 0.25rem;\r\n        border-radius: 0.75rem;\r\n        position: absolute;\r\n        background-color: var(--test, #f6f6f6);\r\n        border: 1px solid var(--black-10);\r\n        z-index: 1;\r\n        opacity: 0;\r\n        overflow: visible;\r\n        animation-duration: 0.25s;\r\n        animation-fill-mode: both;\r\n        padding: 1rem 1rem;\r\n        min-width: 15rem;\r\n\r\n        // Could be better\r\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),\r\n            0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n\r\n        .range-option {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 0.5rem;\r\n\r\n            input {\r\n                border-radius: 0.75rem;\r\n                border: none;\r\n                padding: 0.5rem 1rem;\r\n                outline: none;\r\n            }\r\n        }\r\n\r\n        .controls {\r\n            padding-top: 1rem;\r\n            display: flex;\r\n            flex-direction: row;\r\n            justify-content: right;\r\n            gap: 0.5rem;\r\n        }\r\n    }\r\n\r\n    .filter-content.visible {\r\n        animation-name: fadeIn;\r\n    }\r\n\r\n    .filter-content.hidden {\r\n        animation-name: fadeOut;\r\n    }\r\n}\r\n",
                    "styleUrl": "./range-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "AbstractFilterComponent"
            ],
            "templateData": "<app-button [label]=\"filter().label\" (click)=\"toggleContent()\"></app-button>\r\n<div\r\n    class=\"filter-content\"\r\n    [ngClass]=\"{ visible: showingContent, hidden: !showingContent }\"\r\n>\r\n    <div class=\"range-option\">\r\n        <span>Column</span>\r\n        <app-select-menu [options]=\"filterOptions\"></app-select-menu>\r\n        <input type=\"date\" />\r\n    </div>\r\n    <hr />\r\n    <div class=\"range-option\">\r\n        <span>Column</span>\r\n        <app-select-menu [options]=\"filterOptions\"></app-select-menu>\r\n        <input type=\"number\" />\r\n    </div>\r\n    <div class=\"controls\">\r\n        <app-button [label]=\"'Reset'\"></app-button>\r\n        <app-button [label]=\"'Apply'\" (click)=\"applyHandler()\"></app-button>\r\n    </div>\r\n    <!-- <div class=\"search\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                id=\"searchbar\"\r\n                (input)=\"changeInput($event)\"\r\n            />\r\n            <button [innerText]=\"'Clear'\" type=\"button\"></button>\r\n        </div>\r\n        <div class=\"filter-options-section\">\r\n            @for(option of filter().Options; track option.id){\r\n            <div\r\n                class=\"filter-option\"\r\n                [innerText]=\"option.displayValue\"\r\n                (click)=\"optionSelectedHandler()\"\r\n            ></div>\r\n            }\r\n        </div> -->\r\n</div>\r\n"
        },
        {
            "name": "SelectFilterComponent",
            "id": "component-SelectFilterComponent-5a4acf615de98651a46629bd66812724fd96c458d62f5b4939ca3c8ea56e494f6bc5790bfe1dcb7bacae30a8613cd282979ecd9e4db66773fcfef770c16a1461",
            "file": "src/app/components/filters/select-filter/select-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-filter",
            "styleUrls": [
                "./select-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "input",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "optionSelected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<SelectOption<>>"
                },
                {
                    "name": "reset",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "input.required<SelectFilter<unknown>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<SelectFilter<>>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption<>",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showingConent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "optionSelectedHandler",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "toggleConent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Inject,\r\n    input,\r\n    InputSignal,\r\n    Output,\r\n} from '@angular/core';\r\nimport { SelectFilter } from '../../../../models/filtering/select-filter.model';\r\nimport { AbstractFilterComponent } from '../abstract-filter.component';\r\nimport { ButtonComponent } from '../../button/button.component';\r\nimport { SelectOption } from '../../../../models/filtering/select-option.model';\r\n\r\n@Component({\r\n    selector: 'app-select-filter',\r\n    standalone: true,\r\n    imports: [CommonModule, ButtonComponent],\r\n    templateUrl: './select-filter.component.html',\r\n    styleUrls: ['./select-filter.component.scss'],\r\n})\r\nexport class SelectFilterComponent extends AbstractFilterComponent {\r\n    public filter: InputSignal<SelectFilter<unknown>> =\r\n        input.required<SelectFilter<unknown>>();\r\n    protected showingConent: boolean = false;\r\n    protected selectedOption?: SelectOption<unknown> = undefined;\r\n\r\n    @Output() optionSelected: EventEmitter<SelectOption<unknown>> =\r\n        new EventEmitter();\r\n    @Output() reset: EventEmitter<void> = new EventEmitter();\r\n    @Output() input: EventEmitter<any> = new EventEmitter();\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    clickOutside(event: MouseEvent) {\r\n        if (!this.elementRef.nativeElement.contains(event.target)) {\r\n            this.showingConent = false;\r\n        }\r\n    }\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n        super();\r\n    }\r\n\r\n    protected toggleConent(): void {\r\n        this.showingConent = !this.showingConent;\r\n    }\r\n\r\n    protected optionSelectedHandler(option: SelectOption<unknown>): void {\r\n        this.selectedOption = option;\r\n        this.filter().selectValue(option.id);\r\n        this.optionSelected.emit(option);\r\n        this.toggleConent();\r\n    }\r\n\r\n    protected resetHandler(): void {\r\n        this.selectedOption = undefined;\r\n        this.filter().resetValue();\r\n        this.reset.emit();\r\n    }\r\n\r\n    protected changeInput(event: any): void {\r\n        this.input.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: inline-block;\r\n    position: relative;\r\n\r\n    .filter-content {\r\n        margin-top: 0.25rem;\r\n        border-radius: 0.75rem;\r\n        position: absolute;\r\n        background-color: var(--test, #f6f6f6);\r\n        border: 1px solid var(--black-10);\r\n        z-index: 1;\r\n        opacity: 0;\r\n        overflow: hidden;\r\n        animation-duration: 0.25s;\r\n        animation-fill-mode: both;\r\n        min-width: 15rem;\r\n\r\n        // Could be better\r\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),\r\n            0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n\r\n        .search {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-direction: row;\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid var(--black-10);\r\n\r\n            button {\r\n                border: none;\r\n                cursor: pointer;\r\n                border-top-right-radius: 0.75rem;\r\n            }\r\n\r\n            #searchbar {\r\n                border-top-left-radius: 0.75rem;\r\n                padding: 0.5rem 1rem;\r\n                border: none;\r\n                outline: none;\r\n\r\n                // Does not work yet (search icon)\r\n                // background-image: url(\"../../../../assets/public/search.svg\");\r\n                // background-position: 14px 12px;\r\n                // background-repeat: no-repeat;\r\n            }\r\n        }\r\n\r\n        .filter-options-section {\r\n            overflow-y: auto;\r\n            max-height: 15rem;\r\n\r\n            .filter-option {\r\n                color: var(--black-100);\r\n                padding: 0.5rem 1rem;\r\n            }\r\n\r\n            .filter-option:hover {\r\n                color: var(\r\n                    --black-100\r\n                ); // Should be a tiny bit more black than default\r\n                background-color: var(--black-20);\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n\r\n    .filter-content.visible {\r\n        animation-name: fadeIn;\r\n    }\r\n\r\n    .filter-content.hidden {\r\n        animation-name: fadeOut;\r\n    }\r\n}\r\n",
                    "styleUrl": "./select-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "AbstractFilterComponent"
            ],
            "templateData": "<app-button [label]=\"filter().label\" (click)=\"toggleConent()\"></app-button>\r\n<div\r\n    class=\"filter-content\"\r\n    [ngClass]=\"{ visible: showingConent, hidden: !showingConent }\"\r\n>\r\n    <div class=\"search\">\r\n        <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            id=\"searchbar\"\r\n            (input)=\"changeInput($event)\"\r\n        />\r\n        <!-- Should be an icon button -->\r\n        <button [innerText]=\"'Clear'\" type=\"button\"></button>\r\n    </div>\r\n    <div class=\"filter-options-section\">\r\n        @for(option of filter().Options; track option.id){\r\n        <div\r\n            class=\"filter-option\"\r\n            [innerText]=\"option.label\"\r\n            (click)=\"optionSelectedHandler(option)\"\r\n        ></div>\r\n        }\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SelectMenuComponent",
            "id": "component-SelectMenuComponent-bbdefa950cd875e7e92d590c2fd8cf14b49ba30016ff19ed46d7145094e02f4ae40f07b068ae01eeb79ca5bf1f1d197914923d9957dbcb20128300b738865e32",
            "file": "src/app/components/select-menu/select-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<SelectOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "optionSelected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<SelectOption<any>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<SelectOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ],
                    "required": true
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showingContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "optionSelectedHandler",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    input,\r\n    InputSignal,\r\n    Output,\r\n} from '@angular/core';\r\nimport { SelectOption } from '../../../models/filtering/select-option.model';\r\n\r\n@Component({\r\n    selector: 'app-select-menu',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    templateUrl: './select-menu.component.html',\r\n    styleUrl: './select-menu.component.scss',\r\n})\r\nexport class SelectMenuComponent {\r\n    //This is more of a combobox than a select\r\n    public label: InputSignal<string | undefined> = input();\r\n    public placeholder: InputSignal<string | undefined> = input();\r\n    public options: InputSignal<SelectOption<any>[]> = input.required();\r\n\r\n    @Output() optionSelected: EventEmitter<SelectOption<any>> =\r\n        new EventEmitter();\r\n\r\n    protected showingContent: boolean = false;\r\n    protected selectedOption: SelectOption<any> | undefined = undefined;\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    clickOutside(event: MouseEvent) {\r\n        if (!this.elementRef.nativeElement.contains(event.target)) {\r\n            this.showingContent = false;\r\n        }\r\n    }\r\n\r\n    constructor(protected elementRef: ElementRef) {}\r\n\r\n    ngAfterContentInit(): void {\r\n        if (this.placeholder() === undefined) {\r\n            this.selectedOption = this.options()[0];\r\n        }\r\n    }\r\n\r\n    protected toggleContent(): void {\r\n        this.showingContent = !this.showingContent;\r\n    }\r\n\r\n    protected optionSelectedHandler(option: SelectOption<any>): void {\r\n        this.selectedOption = option;\r\n        this.optionSelected.emit(option);\r\n        this.toggleContent();\r\n    }\r\n}\r\n",
            "styleUrl": "./select-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"select-input\">\r\n    @if(label()){\r\n    <label [innerText]=\"label()\"></label>\r\n    }\r\n    <button type=\"button\" (click)=\"toggleContent()\">\r\n        @if(selectedOption !== undefined){\r\n        <span [innerText]=\"selectedOption.label\"></span>\r\n        } @else if (placeholder() !== undefined) {\r\n        <span [innerText]=\"placeholder()\"></span>\r\n        } @else {\r\n        <span [innerText]=\"'no placeholder'\"></span>\r\n        }\r\n        <span [innerText]=\"'i'\"></span>\r\n    </button>\r\n</div>\r\n<div\r\n    class=\"filter-content\"\r\n    [ngClass]=\"{ visible: showingContent, hidden: !showingContent }\"\r\n>\r\n    @if(options().length > 5){\r\n    <div class=\"search\">\r\n        <input type=\"text\" placeholder=\"Search\" id=\"searchbar\" />\r\n        <!-- (input)=\"changeInput($event)\" -->\r\n\r\n        <button [innerText]=\"'Clear'\" type=\"button\"></button>\r\n    </div>\r\n    }\r\n    <div class=\"filter-options-section\">\r\n        @for(option of options(); track option.id){\r\n        <div\r\n            class=\"filter-option\"\r\n            [innerText]=\"option.label\"\r\n            (click)=\"optionSelectedHandler(option)\"\r\n        ></div>\r\n        }\r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "OtherOperation",
                "childs": [
                    {
                        "name": "Equal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "NotEqual",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "Like",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 6
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/filtering/other-operation.model.ts"
            },
            {
                "name": "RangeOperation",
                "childs": [
                    {
                        "name": "GreaterThan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "GreaterThanOrEqual",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "LowerThan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "LowerThanOrEqual",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/filtering/range-operation.model.ts"
            },
            {
                "name": "SortingDirection",
                "childs": [
                    {
                        "name": "Ascending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Descending",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/sorting/sorting-direction.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/models/filtering/other-operation.model.ts": [
                {
                    "name": "OtherOperation",
                    "childs": [
                        {
                            "name": "Equal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "NotEqual",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "Like",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 6
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/filtering/other-operation.model.ts"
                }
            ],
            "src/models/filtering/range-operation.model.ts": [
                {
                    "name": "RangeOperation",
                    "childs": [
                        {
                            "name": "GreaterThan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "GreaterThanOrEqual",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "LowerThan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "LowerThanOrEqual",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/filtering/range-operation.model.ts"
                }
            ],
            "src/models/sorting/sorting-direction.model.ts": [
                {
                    "name": "SortingDirection",
                    "childs": [
                        {
                            "name": "Ascending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Descending",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/sorting/sorting-direction.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/filters/abstract-filter.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/filters/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/filters/range-filter/range-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RangeFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/filters/select-filter/select-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select-menu/select-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/instance-of.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "InstanceofPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/models/condition.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Condition",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/models/dynamic-query-option.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicQueryOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/filtering/filter.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Filter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/filtering/multi-select-filter.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MultiSelectFilter",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/models/filtering/multi-select-option.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MultiSelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/models/filtering/range-filter.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RangeFilter",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/models/filtering/select-filter.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectFilter",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/models/filtering/select-option.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/models/pagination/pagination.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/sorting/sorting.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sorting",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            }
        ]
    }
}